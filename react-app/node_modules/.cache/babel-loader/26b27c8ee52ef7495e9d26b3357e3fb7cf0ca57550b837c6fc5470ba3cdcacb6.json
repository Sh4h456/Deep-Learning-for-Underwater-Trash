{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useChat.js\nimport { useState, useCallback } from 'react';\nimport { fetchChatReply } from '../api/chat';\nexport const useChat = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    from: 'bot',\n    text: \"Hello! I'm AquaBot.\"\n  }]);\n  const [isChatLoading, setIsChatLoading] = useState(false);\n  const sendMessage = useCallback(async userInput => {\n    if (!userInput || isChatLoading) return;\n    setMessages(prev => [...prev, {\n      from: 'user',\n      text: userInput\n    }]);\n    setIsChatLoading(true);\n    try {\n      const data = await fetchChatReply(userInput);\n      setMessages(prev => [...prev, {\n        from: 'bot',\n        text: data.reply\n      }]);\n    } catch (error) {\n      setMessages(prev => [...prev, {\n        from: 'bot',\n        text: \"Sorry, I'm having trouble.\"\n      }]);\n    } finally {\n      setIsChatLoading(false);\n    }\n  }, [isChatLoading]);\n  return {\n    messages,\n    sendMessage,\n    isChatLoading\n  };\n};\n_s(useChat, \"916uIlPa/UymbImtHOlSYjHxH3o=\");","map":{"version":3,"names":["useState","useCallback","fetchChatReply","useChat","_s","messages","setMessages","from","text","isChatLoading","setIsChatLoading","sendMessage","userInput","prev","data","reply","error"],"sources":["C:/Dummy/FinalProject/react-app/src/hooks/useChat.js"],"sourcesContent":["// src/hooks/useChat.js\r\nimport { useState, useCallback } from 'react';\r\nimport { fetchChatReply } from '../api/chat';\r\n\r\nexport const useChat = () => {\r\n  const [messages, setMessages] = useState([{ from: 'bot', text: \"Hello! I'm AquaBot.\" }]);\r\n  const [isChatLoading, setIsChatLoading] = useState(false);\r\n\r\n  const sendMessage = useCallback(\r\n    async (userInput) => {\r\n      if (!userInput || isChatLoading) return;\r\n      setMessages((prev) => [...prev, { from: 'user', text: userInput }]);\r\n      setIsChatLoading(true);\r\n      try {\r\n        const data = await fetchChatReply(userInput);\r\n        setMessages((prev) => [...prev, { from: 'bot', text: data.reply }]);\r\n      } catch (error) {\r\n        setMessages((prev) => [...prev, { from: 'bot', text: \"Sorry, I'm having trouble.\" }]);\r\n      } finally {\r\n        setIsChatLoading(false);\r\n      }\r\n    },\r\n    [isChatLoading]\r\n  );\r\n\r\n  return { messages, sendMessage, isChatLoading };\r\n};\r\n"],"mappings":";AAAA;AACA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C,SAASC,cAAc,QAAQ,aAAa;AAE5C,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,CAAC;IAAEO,IAAI,EAAE,KAAK;IAAEC,IAAI,EAAE;EAAsB,CAAC,CAAC,CAAC;EACxF,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAEzD,MAAMW,WAAW,GAAGV,WAAW,CAC7B,MAAOW,SAAS,IAAK;IACnB,IAAI,CAACA,SAAS,IAAIH,aAAa,EAAE;IACjCH,WAAW,CAAEO,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAE;MAAEN,IAAI,EAAE,MAAM;MAAEC,IAAI,EAAEI;IAAU,CAAC,CAAC,CAAC;IACnEF,gBAAgB,CAAC,IAAI,CAAC;IACtB,IAAI;MACF,MAAMI,IAAI,GAAG,MAAMZ,cAAc,CAACU,SAAS,CAAC;MAC5CN,WAAW,CAAEO,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAE;QAAEN,IAAI,EAAE,KAAK;QAAEC,IAAI,EAAEM,IAAI,CAACC;MAAM,CAAC,CAAC,CAAC;IACrE,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdV,WAAW,CAAEO,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAE;QAAEN,IAAI,EAAE,KAAK;QAAEC,IAAI,EAAE;MAA6B,CAAC,CAAC,CAAC;IACvF,CAAC,SAAS;MACRE,gBAAgB,CAAC,KAAK,CAAC;IACzB;EACF,CAAC,EACD,CAACD,aAAa,CAChB,CAAC;EAED,OAAO;IAAEJ,QAAQ;IAAEM,WAAW;IAAEF;EAAc,CAAC;AACjD,CAAC;AAACL,EAAA,CAtBWD,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}