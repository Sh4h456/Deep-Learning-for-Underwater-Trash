{"ast":null,"code":"var _jsxFileName = \"C:\\\\Movies\\\\FinalProject\\\\react-app\\\\src\\\\pages\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Header from '../components/Header';\nimport ControlsPanel from '../components/ControlsPanel';\nimport ResultsPanel from '../components/ResultsPanel';\nimport ChatWidget from '../components/ChatWidget';\nimport ModelInsights from '../components/ModelInsights';\nimport { predictImage } from '../api/predict';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Dashboard() {\n  _s();\n  const [result, setResult] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  //const [confidence, setConfidence] = useState(0.5);\n\n  const handleDetect = async file => {\n    if (!file) {\n      setError(\"Please select a file first.\");\n      return;\n    }\n    setResult(null);\n    setIsLoading(true);\n    setError(null);\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      // formData.append('confidence', currentConfidence);\n\n      const data = await predictImage(formData);\n      setResult(data);\n    } catch (err) {\n      setError(err.message || \"Detection failed.\");\n      console.error(err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-900 text-gray-100 font-sans\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"p-4 md:p-8 grid grid-cols-1 lg:grid-cols-3 gap-8 max-w-7xl mx-auto\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lg:col-span-1 space-y-8\",\n        children: [/*#__PURE__*/_jsxDEV(ControlsPanel, {\n          onDetect: handleDetect\n          // confidence={confidence}\n          // onConfidenceChange={setConfidence}\n          ,\n          isLoading: isLoading,\n          error: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ModelInsights, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lg:col-span-2\",\n        children: /*#__PURE__*/_jsxDEV(ResultsPanel, {\n          result: result,\n          isLoading: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatWidget, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"i4JICo7ExrHRvDO5b4HqhCYyJPM=\");\n_c = Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","Header","ControlsPanel","ResultsPanel","ChatWidget","ModelInsights","predictImage","jsxDEV","_jsxDEV","Dashboard","_s","result","setResult","isLoading","setIsLoading","error","setError","handleDetect","file","formData","FormData","append","data","err","message","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onDetect","_c","$RefreshReg$"],"sources":["C:/Movies/FinalProject/react-app/src/pages/Dashboard.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Header from '../components/Header';\r\nimport ControlsPanel from '../components/ControlsPanel';\r\nimport ResultsPanel from '../components/ResultsPanel';\r\nimport ChatWidget from '../components/ChatWidget';\r\nimport ModelInsights from '../components/ModelInsights';\r\nimport { predictImage } from '../api/predict';\r\n\r\nexport default function Dashboard() {\r\n  const [result, setResult] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  //const [confidence, setConfidence] = useState(0.5);\r\n\r\n  const handleDetect = async (file) => {\r\n    if (!file) {\r\n      setError(\"Please select a file first.\");\r\n      return;\r\n    }\r\n\r\n    setResult(null);\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n      // formData.append('confidence', currentConfidence);\r\n\r\n      const data = await predictImage(formData);\r\n      setResult(data);\r\n    } catch (err) {\r\n      setError(err.message || \"Detection failed.\");\r\n      console.error(err);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-900 text-gray-100 font-sans\">\r\n      <Header />\r\n      <main className=\"p-4 md:p-8 grid grid-cols-1 lg:grid-cols-3 gap-8 max-w-7xl mx-auto\">\r\n        <div className=\"lg:col-span-1 space-y-8\">\r\n          <ControlsPanel\r\n            onDetect={handleDetect}\r\n            // confidence={confidence}\r\n            // onConfidenceChange={setConfidence}\r\n            isLoading={isLoading}\r\n            error={error}\r\n          />\r\n          <ModelInsights />\r\n        </div>\r\n        <div className=\"lg:col-span-2\">\r\n          <ResultsPanel result={result} isLoading={isLoading} />\r\n        </div>\r\n      </main>\r\n      <ChatWidget />\r\n    </div>\r\n  );\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,aAAa,MAAM,6BAA6B;AACvD,OAAOC,YAAY,MAAM,4BAA4B;AACrD,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,aAAa,MAAM,6BAA6B;AACvD,SAASC,YAAY,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,eAAe,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EAClC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EACxC;;EAEA,MAAMiB,YAAY,GAAG,MAAOC,IAAI,IAAK;IACnC,IAAI,CAACA,IAAI,EAAE;MACTF,QAAQ,CAAC,6BAA6B,CAAC;MACvC;IACF;IAEAJ,SAAS,CAAC,IAAI,CAAC;IACfE,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF,MAAMG,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;MAC7B;;MAEA,MAAMI,IAAI,GAAG,MAAMhB,YAAY,CAACa,QAAQ,CAAC;MACzCP,SAAS,CAACU,IAAI,CAAC;IACjB,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZP,QAAQ,CAACO,GAAG,CAACC,OAAO,IAAI,mBAAmB,CAAC;MAC5CC,OAAO,CAACV,KAAK,CAACQ,GAAG,CAAC;IACpB,CAAC,SAAS;MACRT,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,oBACEN,OAAA;IAAKkB,SAAS,EAAC,kDAAkD;IAAAC,QAAA,gBAC/DnB,OAAA,CAACP,MAAM;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVvB,OAAA;MAAMkB,SAAS,EAAC,oEAAoE;MAAAC,QAAA,gBAClFnB,OAAA;QAAKkB,SAAS,EAAC,yBAAyB;QAAAC,QAAA,gBACtCnB,OAAA,CAACN,aAAa;UACZ8B,QAAQ,EAAEf;UACV;UACA;UAAA;UACAJ,SAAS,EAAEA,SAAU;UACrBE,KAAK,EAAEA;QAAM;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACd,CAAC,eACFvB,OAAA,CAACH,aAAa;UAAAuB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACd,CAAC,eACNvB,OAAA;QAAKkB,SAAS,EAAC,eAAe;QAAAC,QAAA,eAC5BnB,OAAA,CAACL,YAAY;UAACQ,MAAM,EAAEA,MAAO;UAACE,SAAS,EAAEA;QAAU;UAAAe,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eACPvB,OAAA,CAACJ,UAAU;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACX,CAAC;AAEV;AAACrB,EAAA,CApDuBD,SAAS;AAAAwB,EAAA,GAATxB,SAAS;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}